module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    alu aluadder;
    tester test;
    dff checking[5];
    dff timer[26];
  }
  
  sig question[22];
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    io_led = 3x{{8h00}};    // turn LEDs off   
    led = 8h00;
    test.walker = checking.q;
    timer.d = 0;
    if (io_dip[2][7]) {
      question[21:16] = io_dip[2][5:0];
      question[15:8] = io_dip[1];
      question[7:0] = io_dip[0];
      aluadder.question = question;
    } else {
      timer.d = timer.q + 1;
      aluadder.question = test.question;
      if (test.correctanswer == aluadder.c && timer.q == 1 && checking.q <= 26){
        checking.d = checking.q + 1;
        test.walker = checking.q;
      }
    }
    io_led[2] = aluadder.c;
    io_led[1] = aluadder.x;
    io_led[0] = aluadder.y;
    
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
  }
}